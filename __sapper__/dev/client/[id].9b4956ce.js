import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, p as set_data_dev, n as noop } from './client.7503e5ab.js';
import { title } from 'node:process';

/* src/routes/jobs/[id].svelte generated by Svelte v3.34.0 */
const file = "src/routes/jobs/[id].svelte";

function create_fragment(ctx) {
	let section;
	let h2;
	let t_value = /*job*/ ctx[0].title + "";
	let t;

	const block = {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t = claim_text(h2_nodes, t_value);
			h2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 18, 1, 321);
			attr_dev(section, "class", "job");
			add_location(section, file, 17, 0, 298);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*job*/ 1 && t_value !== (t_value = /*job*/ ctx[0].title + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const { id } = page.params;
	const res = await this.fetch(`jobs/${id}.json`);
	const job = await res.json();
	return { job };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bidu5D", slots, []);
	let { job } = $$props;
	const writable_props = ["job"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("job" in $$props) $$invalidate(0, job = $$props.job);
	};

	$$self.$capture_state = () => ({ preload, title, job });

	$$self.$inject_state = $$props => {
		if ("job" in $$props) $$invalidate(0, job = $$props.job);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [job];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { job: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*job*/ ctx[0] === undefined && !("job" in props)) {
			console.warn("<U5Bidu5D> was created without expected prop 'job'");
		}
	}

	get job() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set job(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bidu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW2lkXS45YjQ5NTZjZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9qb2JzL1tpZF0uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZChwYWdlLCBzZXNzaW9uKSB7XG5cdFx0Y29uc3QgeyBpZCB9ID0gcGFnZS5wYXJhbXM7XG5cblx0XHRjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBqb2JzLyR7aWR9Lmpzb25gKTtcblx0XHRjb25zdCBqb2IgPSBhd2FpdCByZXMuanNvbigpO1xuXG5cdFx0cmV0dXJuIHsgam9iIH07XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuXHRpbXBvcnQgeyB0aXRsZSB9IGZyb20gXCJub2RlOnByb2Nlc3NcIjtcblxuXHRleHBvcnQgbGV0IGpvYjtcbjwvc2NyaXB0PlxuXG48c2VjdGlvbiBjbGFzcz1cImpvYlwiPlxuXHQ8aDI+e2pvYi50aXRsZX08L2gyPlxuPC9zZWN0aW9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozt1QkFrQk0sR0FBRyxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkRBQVQsR0FBRyxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBakJRLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTztTQUNsQyxFQUFFLEtBQUssSUFBSSxDQUFDLE1BQU07T0FFcEIsR0FBRyxTQUFTLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtPQUNqQyxHQUFHLFNBQVMsR0FBRyxDQUFDLElBQUk7VUFFakIsR0FBRzs7Ozs7O09BT0YsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
